name: Documentation & DX Enhancement Review
description: Assess and improve code documentation and developer experience
tags:
  - documentation
  - DX
llm:
  - gpt
  - claude
  - gemini
  - grok
instructions: |
  Review the provided code files with a focus on documentation quality and developer experience (DX):

  1. **Documentation Coverage**
     - Are module-level and function-level comments present and clear?
     - Are parameter and return types well-documented?
     - Are usage examples provided for key functions?
     - Is the purpose of each file and major export obvious?

  2. **Onboarding & Discoverability**
     - Would a new contributor understand how to use or extend this code?
     - Are there “quick reference” sections, gotchas, or onboarding tips?
     - Are cross-references (see also, related functions) present where helpful?

  3. **Naming & Structure**
     - Are names (functions, types, variables) self-explanatory?
     - Is the file organized in a logical, readable way?
     - Are related functions grouped and documented together?

  4. **Error Handling & Messaging**
     - Are error messages descriptive and actionable?
     - Are common failure modes or edge cases explained in the docs?

  5. **Actionable Suggestions**
     - Propose specific improvements: JSDoc comments, inline notes, usage snippets, or reorganizations.
     - Highlight missing or unclear documentation and provide draft text to fill the gaps.

   Assessment:
   - **Strengths**: What's working well for docs and DX
   - **Gaps**: What's missing or confusing
   - **Top Recommendations**: High-impact fixes or additions
   - **Next Steps**: Concrete actions to make this codebase more welcoming and maintainable
